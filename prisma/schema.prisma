generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
}

enum STATUS_APPOINTMENT {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
  WAITING
  IN_PROGRESS
  FAILED
}

enum ROLES {
  ADMIN
  CLIENT
  SUPPLIER
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String    @unique
  password      String
  gender        GENDER
  emailVerified DateTime? @map("email_verified")
  image         String?
  userName      String?   @unique @map("user_name")
  bio           String?
  role          ROLES     @default(CLIENT)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp(6)

  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]

  appointments Appointment[]
  doctors      Doctor[]
  patients     Patient[]
  clinics      UserToClinic[]

  @@index([deletedAt])
  @@map("users")
}

model Account {
  userId            String? @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([deletedAt])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String?  @map("user_id") @db.Uuid
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@index([deletedAt])
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id") @db.Uuid
  providerAccountId    String  @map("provider_accountId")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

enum DonarStatus {
  PENDING
  PAID
  FAILDE
}

model Doctor {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  avatarUrl            String?   @map("avatar_url")
  specialty            String?
  availableFromWeekDay Int       @default(1) @map("available_from_week_day")
  availableToWeekDay   Int       @default(5) @map("available_to_week_day")
  availableFromTime    DateTime  @map("available_from_time")
  availableToTime      DateTime  @map("available_to_time")
  price                Decimal   @default(0) @db.Decimal(12, 2)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime? @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at") @db.Timestamp(6)

  appointments Appointment[]
  userId       String           @map("user_id") @db.Uuid
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  patients     Patient[]
  clinics      DoctorToClinic[]

  @@index([deletedAt])
  @@map("doctors")
}

model Clinic {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  appointments Appointment[]
  patients     Patient[]
  doctors      DoctorToClinic[]
  users        UserToClinic[]

  @@index([deletedAt])
  @@map("clinics")
}

model DoctorToClinic {
  doctorId String @map("doctor_id") @db.Uuid
  clinicId String @map("clinic_id") @db.Uuid

  doctor    Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic    Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@id([doctorId, clinicId])
  @@map("doctor_to_clinic")
}

model UserToClinic {
  userId   String @map("user_id") @db.Uuid
  clinicId String @map("clinic_id") @db.Uuid

  doctor    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic    Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@id([userId, clinicId])
  @@map("user_to_clinic")
}

model Patient {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String?   @unique
  phone     String?   @unique
  gender    GENDER?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  userId       String?       @map("user_id") @db.Uuid
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctorId     String?       @map("doctor_id") @db.Uuid
  doctor       Doctor?       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinicId     String?       @map("clinic_id") @db.Uuid
  clinic       Clinic?       @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@index([deletedAt])
  @@map("patients")
}

model Appointment {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status    STATUS_APPOINTMENT @default(PENDING)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?          @updatedAt @map("updated_at")
  deletedAt DateTime?          @map("deleted_at") @db.Timestamp(6)

  clinicId  String? @map("clinic_id") @db.Uuid
  clinic    Clinic? @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patientId String  @map("patient_id") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String  @map("doctor_id") @db.Uuid
  doctor    Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id") @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("appointments")
}
